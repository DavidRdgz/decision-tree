!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
B	tree.R	/^        B <- bag(X, Y)$/;"	v
BinarySplits	node.R	/^BinarySplits <- function (S, Thresh, ...) {$/;"	f
Branch	node.R	/^Branch <- function (X, Y, Thresh, is.forest, ...) {$/;"	f
Brute	thresh.R	/^Brute <- function (vector, ...) {$/;"	f
CR	node.R	/^    CR <- names(Cr)[Cr]$/;"	v
Cr	node.R	/^    Cr <- pr >= pl$/;"	v
Forest	forest.R	/^Forest <- function () {$/;"	f
Gauss	thresh.R	/^Gauss <- function (vector, k = 30, ...) {$/;"	f
Gini	purity.R	/^Gini <- function (Ys, ...) {$/;"	f
ImpurityMeasures	node.R	/^ImpurityMeasures <- function (LiRi, X, Y, Pure, potential, ...) {$/;"	f
ImpurityMeasures2	node.R	/^ImpurityMeasures2 <- function (LiRi, X, Y, ...) {$/;"	f
ImpurityMeasures3	node.R	/^ImpurityMeasures3 <- function (LiRi, col,  X, Y, ...) {$/;"	f
Info	purity.R	/^Info <- function (Ys, ...) {$/;"	f
KTile	thresh.R	/^KTile <- function (vector, k = 30, ...) {$/;"	f
LX	tree.R	/^    LX <- X[!subset,]$/;"	v
LY	tree.R	/^    LY <- Y[!subset]$/;"	v
MajClasses	node.R	/^MajClasses <- function (C,Y, ...) {$/;"	f
Node	node.R	/^Node <- function (id, X, Y, label, col= 0, cutoff= 0, l.id = 0, r.id = 0, candidates = 0, gain = 0) {$/;"	f
RX	tree.R	/^    RX <- X[subset,]$/;"	v
RY	tree.R	/^    RY <- Y[subset]$/;"	v
Rcandidates	node.R	/^        Rcandidates <- X > cutoff$/;"	v
Split	node.R	/^Split <- function (X, Y, Thresh, Pure, potential, is.forest, ...) {$/;"	f
TopBinary	node.R	/^TopBinary <- function (measures, ...) {$/;"	f
Tree	tree.R	/^Tree <- function () {$/;"	f
Twoing	node.R	/^Twoing <- function (X, Y, Thresh, is.forest, ...) {$/;"	f
Twoing2	purity.R	/^Twoing2 <- function (Ys, ...) {$/;"	f
Uniform	thresh.R	/^Uniform <- function (vector, k = 30, ...) {$/;"	f
X	main.R	/^X <- iris[,1:4]; Y <- iris[,5]$/;"	g
X	tree.R	/^        X <- B[["X"]]; Y <- B[["Y"]]$/;"	v
XY	tree.R	/^        XY <- q[[1]]; q <- q[-1]$/;"	v
Y	main.R	/^X <- iris[,1:4]; Y <- iris[,5]$/;"	v
a.max	thresh.R	/^    a.max <- max(vector)$/;"	v
add.Tree	forest.R	/^add.Tree <- function (f, t, ...) {$/;"	f
args	tree.R	/^    args <- mget(names(formals()),sys.frame(sys.nframe()))[-c(1,2)]$/;"	v
bag	tree.R	/^bag <- function (X, Y, n = 300, ...) {$/;"	f
c	node.R	/^    c  <- C[["candidates"]]$/;"	v
children	tree.R	/^     children <- list(r.id = XY[["id"]] + 1 , l.id = XY[["id"]] + 2)$/;"	v
children.payload	tree.R	/^children.payload <- function (XY, s, ...) {$/;"	f
col	node.R	/^        col <- sample(1:k, f)$/;"	v
col	node.R	/^    col <- sample(1:k, n)$/;"	v
dt	main.R	/^dt <- tree(X,Y, potential = FALSE)$/;"	g
f	forest.R	/^        f <- add.Tree(f, t)$/;"	v
f	forest.R	/^    f <- Forest()$/;"	v
forest	forest.R	/^forest <- function (X, Y, n, grow = TRUE, ...) {$/;"	f
gain	node.R	/^        gain <- distY - p * IR - (1-p) * IL$/;"	v
gain	purity.R	/^        gain <- distY - p * IR - (1-p) * IL$/;"	v
get.Gain	node.R	/^get.Gain <- function (Pure, Y, distY, n, Rcandidates, potential, ...) {$/;"	f
get.Gain	purity.R	/^get.Gain <- function (Pure, Y, distY, n, Rcandidates, potential, ...) {$/;"	f
get.Phi	node.R	/^get.Phi<- function (Y, n, Rcandidates, ...) {$/;"	f
get.X	tree.R	/^get.X <- function (XY, subset, ...) {$/;"	f
get.Y	tree.R	/^get.Y <- function (XY, subset, ...) {$/;"	f
get.branch	tree.R	/^get.branch <- function(t, n, ...) UseMethod("get.branch")$/;"	f
get.branch.Tree	tree.R	/^get.branch.Tree <- function (t, n, ...) {$/;"	f
get.children	tree.R	/^get.children <- function (X, Y, subset, ...) {$/;"	f
get.top	tree.R	/^get.top <- function (Y, ...) {$/;"	f
go.right	tree.R	/^            go.right <- X[iter, node$col] > node$cutoff$/;"	v
grow.tree	tree.R	/^grow.tree <- function (t, n, ...) UseMethod("grow.tree")$/;"	f
grow.tree.Tree	tree.R	/^grow.tree.Tree <- function (t, n, ...) {$/;"	f
load	node.R	/^load <- function (col, Rcandidates, gain, cutoff, ...) {$/;"	f
max	node.R	/^    max <- list(0,0,gain = 0,0)$/;"	v
mu	thresh.R	/^    mu <- mean(vector)$/;"	v
nochildren.payload	tree.R	/^nochildren.payload <- function (XY, s, ...) {$/;"	f
p	purity.R	/^    p <- table(Ys)\/length(Ys)$/;"	v
payload	tree.R	/^            payload <- nochildren.payload(XY, s)$/;"	v
phi	node.R	/^            phi <- get.Phi(Y, n, Rcandidates)$/;"	v
phi	node.R	/^        phi <- get.Phi(Pure, Y, n, Rcandidates)$/;"	v
pl	node.R	/^        pl   <- table(Y[!Rcandidates])\/sum(!Rcandidates)$/;"	v
pl	node.R	/^    pl <- table(L)\/l$/;"	v
pl	purity.R	/^    pl   <- table(Y[!Rcandidates])\/sum(!Rcandidates)$/;"	v
potent	node.R	/^            potent <- -(p * log(p) + (1-p) * log(1-p))$/;"	v
potent	purity.R	/^            potent <- -(p * log(p) + (1-p) * log(1-p))$/;"	v
pr	node.R	/^        pr   <- table(Y[Rcandidates])\/sum(Rcandidates)$/;"	v
pr	node.R	/^    pr <- table(R)\/r$/;"	v
pr	purity.R	/^    pr   <- table(Y[Rcandidates])\/sum(Rcandidates)$/;"	v
pred	forest.R	/^    pred <- c(pred, top.pred(tmp.pred))$/;"	v
predict	tree.R	/^predict <- function(t, X, ...) UseMethod("predict")$/;"	f
predict.Tree	tree.R	/^predict.Tree <- function(t, X, ...) {$/;"	f
predictions	tree.R	/^        predictions <- c(predictions, node$label)$/;"	v
push.children	tree.R	/^push.children <- function (q, id, children, ...) {$/;"	f
push.queue	tree.R	/^push.queue <- function (q, id, X, Y, ...) {$/;"	f
quick.select	quickselect.R	/^quick.select <- function(x, k, ...) {$/;"	f
rf.predict	forest.R	/^rf.predict <- function (f, X, ...) {$/;"	f
s	thresh.R	/^    s  <- sd(vector)$/;"	v
setup.queue	tree.R	/^setup.queue <- function (id, X, Y, ...) {$/;"	f
sub	tree.R	/^    sub <- sample(1:s, n, replace = TRUE)$/;"	v
subset	tree.R	/^            subset   <- s[["candidates"]]$/;"	v
swig	node.R	/^swig <- function (X, ...) {$/;"	f
t	forest.R	/^        t <- tree(X,Y, is.forest = grow)$/;"	v
t	tree.R	/^            t        <- grow.tree(t, n)$/;"	v
t	tree.R	/^            t       <- grow.tree(t, n)$/;"	v
tmp	thresh.R	/^            tmp <- c(tmp, vec[i] + (vec[i+1] - vec[i])\/2)$/;"	v
tmp	thresh.R	/^            tmp <- c(tmp, vec[i])$/;"	v
tmp	thresh.R	/^        tmp <- c(tmp, a.min + i * (a.max - a.min)\/(k+1))$/;"	v
tmp	thresh.R	/^        tmp <- c(tmp, mu + s * pnorm(i\/(k+1)))$/;"	v
tmp	thresh.R	/^        tmp <- c(tmp, quick.select(vector, n*i\/(k+1)))$/;"	v
tmp.pred	forest.R	/^            tmp.pred <- c(tmp.pred, predict(t, X[row,]))$/;"	v
top.pred	forest.R	/^top.pred <- function (tmp.pred, ...) {$/;"	f
tree	tree.R	/^tree <- function(X, Y, Thresh = Gauss, Pure = Info, potential = FALSE, is.forest = FALSE, splitter = Split,  ...) {$/;"	f
twig	node.R	/^twig <- function (X, f = 1, ...) {$/;"	f
vec	thresh.R	/^    vec <- sort(vector)$/;"	v
wig	node.R	/^wig <- function (X, ...) {$/;"	f
x1	quickselect.R	/^            x1 <- c(x1, x[i])$/;"	v
x1	quickselect.R	/^    x1 <- c(); x2 <- c()$/;"	v
x2	quickselect.R	/^            x2 <- c(x2, x[i])$/;"	v
